generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["queryCompiler", "driverAdapters"]

  // outputs 
  // web app :
  output = "../../web/src/types/prisma"
  // web app :
  // output = "../../app/src/types/prisma"

  // Optional
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * user info
 * login info
 * profile info
 */
model User {
  id                           String                  @id @default(cuid())
  phone                        String                  @unique
  otp                          String?
  role                         UserRole
  hashedPassword               String?
  passwordSet                  DateTime?
  blocked                      Boolean                 @default(false)
  verified                     DateTime?
  retryCount                   Int                     @default(0)
  /////////////////////////////
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  /////////////////////////////
  complaints                   Complaint[]
  requests                     Request[]
  /////////////////////////////
  loginInfo                    LoginInfo?              @relation()
  profile                      Profile?                @relation()
  /////////////////////////////
  createdDrivers               Driver[]                @relation("created")
  updatedDrivers               Driver[]                @relation("updated")
  deletedDrivers               Driver[]                @relation("deleted")
  /////////////////////////////
  createdDriversDocuments      DriverDocuments[]       @relation("created")
  updatedDriversDocuments      DriverDocuments[]       @relation("updated")
  deletedDriversDocuments      DriverDocuments[]       @relation("deleted")
  /////////////////////////////
  createdDrugTest              DrugTest[]              @relation("created")
  updatedDrugTest              DrugTest[]              @relation("updated")
  deletedDrugTest              DrugTest[]              @relation("deleted")
  /////////////////////////////
  createdDriverLicense         DriverLicense[]         @relation("created")
  updatedDriverLicense         DriverLicense[]         @relation("updated")
  deletedDriverLicense         DriverLicense[]         @relation("deleted")
  /////////////////////////////
  createdPassport              Passport[]              @relation("created")
  updatedPassport              Passport[]              @relation("updated")
  deletedPassport              Passport[]              @relation("deleted")
  /////////////////////////////
  createdVisa                  Visa[]                  @relation("created")
  updatedVisa                  Visa[]                  @relation("updated")
  deletedVisa                  Visa[]                  @relation("deleted")
  /////////////////////////////
  createdAgencyAgent           AgencyAgent[]           @relation("created")
  updatedAgencyAgent           AgencyAgent[]           @relation("updated")
  deletedAgencyAgent           AgencyAgent[]           @relation("deleted")
  /////////////////////////////
  createdAgencyAgentDelegation AgencyAgentDelegation[] @relation("created")
  updatedAgencyAgentDelegation AgencyAgentDelegation[] @relation("updated")
  deletedAgencyAgentDelegation AgencyAgentDelegation[] @relation("deleted")
  /////////////////////////////
  createdAgency                Agency[]                @relation("created")
  updatedAgency                Agency[]                @relation("updated")
  deletedAgency                Agency[]                @relation("deleted")
  /////////////////////////////
  createdEmployee              Employee[]              @relation("created")
  updatedEmployee              Employee[]              @relation("updated")
  deletedEmployee              Employee[]              @relation("deleted")
  /////////////////////////////
  createdTruck                 Truck[]                 @relation("created")
  updatedTruck                 Truck[]                 @relation("updated")
  deletedTruck                 Truck[]                 @relation("deleted")
  /////////////////////////////
  createdTruckImage            TruckImage[]            @relation("created")
  updatedTruckImage            TruckImage[]            @relation("updated")
  deletedTruckImage            TruckImage[]            @relation("deleted")
  /////////////////////////////
  createdTruckLicense          TruckLicense[]          @relation("created")
  updatedTruckLicense          TruckLicense[]          @relation("updated")
  deletedTruckLicense          TruckLicense[]          @relation("deleted")
  /////////////////////////////
  createdTruckOwnership        TruckOwnership[]        @relation("created")
  updatedTruckOwnership        TruckOwnership[]        @relation("updated")
  deletedTruckOwnership        TruckOwnership[]        @relation("deleted")
  /////////////////////////////
  createdDriverTruck           DriverTruck[]           @relation("created")
  updatedDriverTruck           DriverTruck[]           @relation("updated")
  deletedDriverTruck           DriverTruck[]           @relation("deleted")
  /////////////////////////////
  createdDelegation            Delegation[]            @relation("created")
  updatedDelegation            Delegation[]            @relation("updated")
  deletedDelegation            Delegation[]            @relation("deleted")
  /////////////////////////////
  createdTrailer               Trailer[]               @relation("created")
  updatedTrailer               Trailer[]               @relation("updated")
  deletedTrailer               Trailer[]               @relation("deleted")
  /////////////////////////////
  createdTrailerImage          TrailerImage[]          @relation("created")
  updatedTrailerImage          TrailerImage[]          @relation("updated")
  deletedTrailerImage          TrailerImage[]          @relation("deleted")
  /////////////////////////////
  createdTrailerLicense        TrailerLicense[]        @relation("created")
  updatedTrailerLicense        TrailerLicense[]        @relation("updated")
  deletedTrailerLicense        TrailerLicense[]        @relation("deleted")
  /////////////////////////////
  createdTrailerOwnership      TrailerOwnership[]      @relation("created")
  updatedTrailerOwnership      TrailerOwnership[]      @relation("updated")
  deletedTrailerOwnership      TrailerOwnership[]      @relation("deleted")
  /////////////////////////////
  createdRequest               Request[]               @relation("created")
  updatedRequest               Request[]               @relation("updated")
  deletedRequest               Request[]               @relation("deleted")
  /////////////////////////////
  createdComplaint             Complaint[]             @relation("created")
  updatedComplaint             Complaint[]             @relation("updated")
  deletedComplaint             Complaint[]             @relation("deleted")
  /////////////////////////////
  notificationsSent            Notification[]          @relation("NotificationsFrom")
  notificationsReceived        Notification[]          @relation("NotificationsTo")

  @@index([id, phone])
}

model LoginInfo {
  id               String    @id @default(cuid())
  lastLogin        DateTime?
  lastLoginAttempt DateTime?
  lastLoginIp      String?
  lastLoginDevice  String?
  /////////////////////////////
  user             User      @relation(references: [id], fields: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId           String    @unique
}

model Profile {
  id              String             @id @default(cuid())
  email           String?            @unique
  fullName        String?
  nickname        String?
  image           String?
  otherInfo       String? // added field
  profileComplete DateTime?
  /////////////////////////////
  address         Address?           @relation()
  national        NationalIdentity?  @relation()
  /////////////////////////////
  user            User               @relation(references: [id], fields: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId          String             @unique
  /////////////////////////////
  carOwner        TruckOwnership[]
  trailerOwner    TrailerOwnership[]
  driver          Driver?            @relation()
  agencyAgent     AgencyAgent?       @relation()
  agency          Agency?            @relation()
  employee        Employee?          @relation()
}

enum UserRole {
  admin
  operator
  employee
  ///////
  client
  agency
  agencyAgent
  //////
  owner
  driver
}

model Address {
  id        String  @id @default(cuid())
  line1     String?
  line2     String?
  city      String?
  country   String?
  state     String?
  /////////////////////////////
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade, onUpdate: Cascade)
  profileId String  @unique
}

model NationalIdentity {
  id               String   @id @default(cuid())
  nationalIdNumber String   @unique
  face             String?
  back             String?
  /////////////////////////////
  profile          Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId        String?  @unique
}

/**
 * driver info
 */

model Driver {
  id              String           @id @default(cuid())
  suspendDuration DateTime?
  /////////////////////////////
  documents       DriverDocuments? @relation()
  driverType      DriverType
  grade           DriverGrade
  /////////////////////////////
  profile         Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId       String           @unique
  driverTruck     DriverTruck[]
  /**
   * add invter can invite other driver
   */

  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

enum DriverType {
  national
  international
  all
}

enum DriverGrade {
  first
  second
  third
}

model DriverDocuments {
  id             String         @id @default(cuid())
  drugTest       DrugTest?      @relation()
  criminalRecord String?
  passport       Passport?      @relation()
  license        DriverLicense? @relation()
  driver         Driver?        @relation(references: [id], fields: [driverId], onDelete: Cascade, onUpdate: Cascade)
  driverId       String?        @unique
  // audit fields
  createdAt      DateTime       @default(now())
  createdBy      User?          @relation("created", fields: [creatorId], references: [id])
  creatorId      String?
  updatedAt      DateTime       @updatedAt
  updatedBy      User?          @relation("updated", fields: [updaterId], references: [id])
  updaterId      String?
  archivedAt     DateTime?
  archivedBy     User?          @relation("deleted", fields: [archivedById], references: [id])
  archivedById   String?
}

model DrugTest {
  id               String          @id @default(cuid())
  testDate         DateTime?
  result           DrugTestResult?
  testImage        String?
  /////////////////////////////
  driverDocuments  DriverDocuments @relation(references: [id], fields: [driverDocumentId], onDelete: Cascade, onUpdate: Cascade)
  driverDocumentId String          @unique
  // audit fields
  createdAt        DateTime        @default(now())
  createdBy        User?           @relation("created", fields: [creatorId], references: [id])
  creatorId        String?
  updatedAt        DateTime        @updatedAt
  updatedBy        User?           @relation("updated", fields: [updaterId], references: [id])
  updaterId        String?
  archivedAt       DateTime?
  archivedBy       User?           @relation("deleted", fields: [archivedById], references: [id])
  archivedById     String?
}

enum DrugTestResult {
  negative
  positive
}

model DriverLicense {
  id               String            @id @default(cuid())
  number           String?           @unique
  type             DriverLicenseType
  traffic_unit     String?
  face             String?
  back             String?
  startDate        DateTime?
  endDate          DateTime?
  /////////////////////////////
  driverDocument   DriverDocuments   @relation(references: [id], fields: [driverDocumentId], onDelete: Cascade, onUpdate: Cascade)
  driverDocumentId String            @unique
  // audit fields
  createdAt        DateTime          @default(now())
  createdBy        User?             @relation("created", fields: [creatorId], references: [id])
  creatorId        String?
  updatedAt        DateTime          @updatedAt
  updatedBy        User?             @relation("updated", fields: [updaterId], references: [id])
  updaterId        String?
  archivedAt       DateTime?
  archivedBy       User?             @relation("deleted", fields: [archivedById], references: [id])
  archivedById     String?
}

enum DriverLicenseType {
  // note
  first
  second
  third
  private
}

model Passport {
  id               String          @id @default(cuid())
  number           String          @unique
  face             String?
  back             String?
  visas            Visa[]
  /////////////////////////////
  driverDocument   DriverDocuments @relation(references: [id], fields: [driverDocumentId], onDelete: Cascade, onUpdate: Cascade)
  driverDocumentId String          @unique
  // audit fields
  createdAt        DateTime        @default(now())
  createdBy        User?           @relation("created", fields: [creatorId], references: [id])
  creatorId        String?
  updatedAt        DateTime        @updatedAt
  updatedBy        User?           @relation("updated", fields: [updaterId], references: [id])
  updaterId        String?
  archivedAt       DateTime?
  archivedBy       User?           @relation("deleted", fields: [archivedById], references: [id])
  archivedById     String?
}

model Visa {
  id           String    @id @default(cuid())
  image        String?
  startDate    DateTime?
  endDate      DateTime?
  country      String?
  comments     String?
  /////////////////////////////
  passport     Passport  @relation(references: [id], fields: [passportId], onDelete: Cascade, onUpdate: Cascade)
  passportId   String
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

/**
 * agent agency info
 * agency info
 * employee info
 */

model AgencyAgent {
  id           String                  @id @default(cuid())
  profile      Profile                 @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId    String                  @unique
  delegations  AgencyAgentDelegation[]
  // audit fields
  createdAt    DateTime                @default(now())
  createdBy    User?                   @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime                @updatedAt
  updatedBy    User?                   @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?                   @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model AgencyAgentDelegation {
  id            String       @id @default(cuid())
  agentAgency   AgencyAgent? @relation(fields: [agentAgencyId], references: [id])
  agentAgencyId String?
  active        Boolean      @default(true)
  // audit fields
  createdAt     DateTime     @default(now())
  createdBy     User?        @relation("created", fields: [creatorId], references: [id])
  creatorId     String?
  updatedAt     DateTime     @updatedAt
  updatedBy     User?        @relation("updated", fields: [updaterId], references: [id])
  updaterId     String?
  archivedAt    DateTime?
  archivedBy    User?        @relation("deleted", fields: [archivedById], references: [id])
  archivedById  String?
}

model Agency {
  id                 String    @id @default(cuid())
  name               String    @unique
  registrationRecord String?
  phone1             String?
  phone2             String?
  phone3             String?
  email              String?
  profile            Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId          String    @unique
  // audit fields
  createdAt          DateTime  @default(now())
  createdBy          User?     @relation("created", fields: [creatorId], references: [id])
  creatorId          String?
  updatedAt          DateTime  @updatedAt
  updatedBy          User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId          String?
  archivedAt         DateTime?
  archivedBy         User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById       String?
}

model Employee {
  id           String    @id @default(cuid())
  cv           String?
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId    String    @unique
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

/**
 * truck info
 * trailer info
 */

model Truck {
  id              String          @id @default(cuid())
  plateNumber     String?         @unique
  type            String?
  brand           String?
  axleCount       Int?
  modelYear       Int?
  cargoType       String?
  maxLoad         Float?
  safetyEquipment String?
  chassisNumber   String?
  engineNumber    String?
  owner           TruckOwnership? @relation()
  images          TruckImage?     @relation()
  license         TruckLicense?   @relation()
  /////////////////////////////
  complaints      Complaint[]
  drivers         DriverTruck[]
  // audit fields
  createdAt       DateTime        @default(now())
  createdBy       User?           @relation("created", fields: [creatorId], references: [id])
  creatorId       String?
  updatedAt       DateTime        @updatedAt
  updatedBy       User?           @relation("updated", fields: [updaterId], references: [id])
  updaterId       String?
  archivedAt      DateTime?
  archivedBy      User?           @relation("deleted", fields: [archivedById], references: [id])
  archivedById    String?
}

model TruckImage {
  id           String    @id @default(cuid())
  front        String?
  back         String?
  left         String?
  right        String?
  /////////////////////////////
  truck        Truck     @relation(references: [id], fields: [truckId], onDelete: Cascade, onUpdate: Cascade)
  truckId      String    @unique
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model TruckLicense {
  id           String    @id @default(cuid())
  number       String?   @unique
  face         String?
  back         String?
  truck        Truck     @relation(references: [id], fields: [truckId], onDelete: Cascade, onUpdate: Cascade)
  truckId      String    @unique
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model TruckOwnership {
  id             String    @id @default(cuid())
  ownershipProof String?
  utilityBill    String?
  profile        Profile   @relation(fields: [profileId], references: [id])
  profileId      String    @unique
  truck          Truck     @relation(references: [id], fields: [truckId], onDelete: Cascade, onUpdate: Cascade)
  truckId        String    @unique
  // audit fields
  createdAt      DateTime  @default(now())
  createdBy      User?     @relation("created", fields: [creatorId], references: [id])
  creatorId      String?
  updatedAt      DateTime  @updatedAt
  updatedBy      User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId      String?
  archivedAt     DateTime?
  archivedBy     User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById   String?
}

model DriverTruck {
  id           String      @id @default(cuid())
  driver       Driver      @relation(fields: [driverId], references: [id])
  driverId     String
  truck        Truck       @relation(fields: [truckId], references: [id])
  truckId      String
  delegation   Delegation? @relation(fields: [delegationId], references: [id])
  delegationId String?     @unique
  active       Boolean     @default(true)
  // audit fields
  createdAt    DateTime    @default(now())
  createdBy    User?       @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime    @updatedAt
  updatedBy    User?       @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?       @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model Delegation {
  id           String       @id @default(cuid())
  DriverTruck  DriverTruck?
  active       Boolean      @default(true)
  // audit fields
  createdAt    DateTime     @default(now())
  createdBy    User?        @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime     @updatedAt
  updatedBy    User?        @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?        @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model Trailer {
  id              String            @id @default(cuid())
  plateNumber     String            @unique
  type            String
  brand           String
  axleCount       Int
  modelYear       Int
  cargoType       String?
  maxLoad         Float?
  safetyEquipment String?
  chassisNumber   String?
  owner           TrailerOwnership? @relation()
  images          TrailerImage?     @relation()
  license         TrailerLicense?   @relation()
  // audit fields
  createdAt       DateTime          @default(now())
  createdBy       User?             @relation("created", fields: [creatorId], references: [id])
  creatorId       String?
  updatedAt       DateTime          @updatedAt
  updatedBy       User?             @relation("updated", fields: [updaterId], references: [id])
  updaterId       String?
  archivedAt      DateTime?
  archivedBy      User?             @relation("deleted", fields: [archivedById], references: [id])
  archivedById    String?
}

model TrailerImage {
  id           String    @id @default(cuid())
  front        String?
  back         String?
  left         String?
  right        String?
  /////////////////////////////
  trailer      Trailer   @relation(references: [id], fields: [trailerId], onDelete: Cascade, onUpdate: Cascade)
  trailerId    String    @unique
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model TrailerLicense {
  id           String    @id @default(cuid())
  number       String?   @unique
  face         String?
  back         String?
  trailer      Trailer   @relation(references: [id], fields: [trailerId], onDelete: Cascade, onUpdate: Cascade)
  trailerId    String    @unique
  // audit fields
  createdAt    DateTime  @default(now())
  createdBy    User?     @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime  @updatedAt
  updatedBy    User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

model TrailerOwnership {
  id             String    @id @default(cuid())
  ownershipProof String?
  utilityBill    String?
  profile        Profile   @relation(fields: [profileId], references: [id])
  profileId      String    @unique
  trailer        Trailer   @relation(references: [id], fields: [trailerId], onDelete: Cascade, onUpdate: Cascade)
  trailerId      String    @unique
  // audit fields
  createdAt      DateTime  @default(now())
  createdBy      User?     @relation("created", fields: [creatorId], references: [id])
  creatorId      String?
  updatedAt      DateTime  @updatedAt
  updatedBy      User?     @relation("updated", fields: [updaterId], references: [id])
  updaterId      String?
  archivedAt     DateTime?
  archivedBy     User?     @relation("deleted", fields: [archivedById], references: [id])
  archivedById   String?
}

model Request {
  id              String        @id @default(cuid())
  requestedBy     User          @relation(fields: [requestedById], references: [id])
  requestedById   String
  carType         String
  cargoType       String
  unitType        UnitType      @default(shipment)
  unitCount       Int
  pickupLocation  String
  dropoffLocation String
  distanceKM      Float?
  priceEstimate   Float?
  transportType   TransportType @default(inclusive)
  paymentOption   PaymentOption @default(cash)
  advancePayment  Float?
  status          RequestStatus @default(pending)
  notes           String?
  // audit fields
  createdAt       DateTime      @default(now())
  createdBy       User?         @relation("created", fields: [creatorId], references: [id])
  creatorId       String?
  updatedAt       DateTime      @updatedAt
  updatedBy       User?         @relation("updated", fields: [updaterId], references: [id])
  updaterId       String?
  archivedAt      DateTime?
  archivedBy      User?         @relation("deleted", fields: [archivedById], references: [id])
  archivedById    String?
}

enum UnitType {
  shipment
  ton
  cubic_meter
  jump
  pallet
  container_20
  container_40
}

enum TransportType {
  inclusive
  exclusive
}

enum PaymentOption {
  cash
  bank_transfer
  ewallet
}

enum RequestStatus {
  pending
  assigned
  completed
  canceled
}

model Complaint {
  id           String          @id @default(cuid())
  raisedBy     User            @relation(fields: [raisedById], references: [id])
  raisedById   String
  relatedTruck Truck?          @relation(fields: [truckId], references: [id])
  truckId      String?
  description  String
  status       ComplaintStatus @default(open)
  // audit fields
  createdAt    DateTime        @default(now())
  createdBy    User?           @relation("created", fields: [creatorId], references: [id])
  creatorId    String?
  updatedAt    DateTime        @updatedAt
  updatedBy    User?           @relation("updated", fields: [updaterId], references: [id])
  updaterId    String?
  archivedAt   DateTime?
  archivedBy   User?           @relation("deleted", fields: [archivedById], references: [id])
  archivedById String?
}

enum ComplaintStatus {
  open
  resolved
  canceled
}

model Notification {
  id        String           @id @default(cuid())
  content   String
  type      NotificationType
  read      DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  from      User?            @relation("NotificationsFrom", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String?
  to        User?            @relation("NotificationsTo", fields: [toId], references: [id], onDelete: Cascade)
  toId      String?
}

enum NotificationType {
  newRequest
  closedRequest
  newComplain
  resolvedComplain
}
